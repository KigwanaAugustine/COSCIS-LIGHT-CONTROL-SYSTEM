
light_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000900  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8mcu_initv>:
}

//retrieve user password from eeprom
void get_password(char password[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)password, (const void*)EEPROM_ADDRESS, PASSWORD_LENGTH);
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
  70:	14 ba       	out	0x14, r1	; 20
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	80 64       	ori	r24, 0x40	; 64
  76:	8b bb       	out	0x1b, r24	; 27
  78:	08 95       	ret

0000007a <_Z13detect_motionv>:
  7a:	9e 9b       	sbis	0x13, 6	; 19
  7c:	03 c0       	rjmp	.+6      	; 0x84 <_Z13detect_motionv+0xa>
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	08 95       	ret

0000008a <_Z21check_light_intensityv>:
  8a:	83 b3       	in	r24, 0x13	; 19
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	08 95       	ret

00000092 <_Z14switch_pressedi>:
  92:	23 b3       	in	r18, 0x13	; 19
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z14switch_pressedi+0xa>
  98:	35 95       	asr	r19
  9a:	27 95       	ror	r18
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <_Z14switch_pressedi+0x6>
  a0:	20 fd       	sbrc	r18, 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <_Z14switch_pressedi+0x18>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <_Z8light_oni>:
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z8light_oni+0xc>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_Z8light_oni+0x8>
  c0:	29 2b       	or	r18, r25
  c2:	2b bb       	out	0x1b, r18	; 27
  c4:	08 95       	ret

000000c6 <_Z9light_offi>:
  c6:	9b b3       	in	r25, 0x1b	; 27
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <_Z9light_offi+0xc>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <_Z9light_offi+0x8>
  d6:	20 95       	com	r18
  d8:	29 23       	and	r18, r25
  da:	2b bb       	out	0x1b, r18	; 27
  dc:	08 95       	ret

000000de <_Z19manual_light_switchv>:


void manual_light_switch()
{
	
	if (switch_pressed(LLT1_SWITCH))
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 49 00 	call	0x92	; 0x92 <_Z14switch_pressedi>
  e6:	89 2b       	or	r24, r25
  e8:	29 f0       	breq	.+10     	; 0xf4 <_Z19manual_light_switchv+0x16>
	{
		light_on(LLT1);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
  f2:	04 c0       	rjmp	.+8      	; 0xfc <_Z19manual_light_switchv+0x1e>
	}
	else
	{
		light_off(LLT1);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
	}
	
	
	if(switch_pressed(LLT2_SWITCH))
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 49 00 	call	0x92	; 0x92 <_Z14switch_pressedi>
 104:	89 2b       	or	r24, r25
 106:	29 f0       	breq	.+10     	; 0x112 <_Z19manual_light_switchv+0x34>
	{
		light_on(LLT2);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
 110:	04 c0       	rjmp	.+8      	; 0x11a <_Z19manual_light_switchv+0x3c>
	}
	else
	{
		light_off(LLT2);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
	}
	
	if(switch_pressed(LLT3_SWITCH))
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 49 00 	call	0x92	; 0x92 <_Z14switch_pressedi>
 122:	89 2b       	or	r24, r25
 124:	29 f0       	breq	.+10     	; 0x130 <_Z19manual_light_switchv+0x52>
	{
		light_on(LLT3);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
 12e:	04 c0       	rjmp	.+8      	; 0x138 <_Z19manual_light_switchv+0x5a>
	}
	else
	{
		light_off(LLT3);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
	}
	
	if(switch_pressed(LLT4_SWITCH))
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 49 00 	call	0x92	; 0x92 <_Z14switch_pressedi>
 140:	89 2b       	or	r24, r25
 142:	29 f0       	breq	.+10     	; 0x14e <_Z19manual_light_switchv+0x70>
	{
		light_on(LLT4);
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
 14c:	04 c0       	rjmp	.+8      	; 0x156 <_Z19manual_light_switchv+0x78>
	}
	else
	{
		light_off(LLT4);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
	}
	
	if(switch_pressed(SECURITY_SWITCH))
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 49 00 	call	0x92	; 0x92 <_Z14switch_pressedi>
 15e:	89 2b       	or	r24, r25
 160:	29 f0       	breq	.+10     	; 0x16c <_Z19manual_light_switchv+0x8e>
	{
		light_on(SECURITY);
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
 16a:	08 95       	ret
	}
	else
	{
		light_off(SECURITY);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
 174:	08 95       	ret

00000176 <main>:
int check_light_intensity();
int detect_motion();

int main(void)
{
	mcu_init();
 176:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8mcu_initv>
	
    while (1)
	{
		manual_light_switch();
 17a:	0e 94 6f 00 	call	0xde	; 0xde <_Z19manual_light_switchv>

		if(check_light_intensity())  //if darkness is detected, turn on security light
 17e:	0e 94 45 00 	call	0x8a	; 0x8a <_Z21check_light_intensityv>
 182:	89 2b       	or	r24, r25
 184:	21 f0       	breq	.+8      	; 0x18e <main+0x18>
		{
			light_on(SECURITY);
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
		}

		if(detect_motion()) 
 18e:	0e 94 3d 00 	call	0x7a	; 0x7a <_Z13detect_motionv>
 192:	89 2b       	or	r24, r25
 194:	29 f0       	breq	.+10     	; 0x1a0 <main+0x2a>
		{
			light_on(LLT2);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8light_oni>
 19e:	ed cf       	rjmp	.-38     	; 0x17a <main+0x4>
		}
		else
		{
			light_off(LLT2);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9light_offi>
 1a8:	e8 cf       	rjmp	.-48     	; 0x17a <main+0x4>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
