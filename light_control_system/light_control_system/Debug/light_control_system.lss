
light_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ea  00800060  00800060  00000668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000006d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181a  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c03  00000000  00000000  00002833  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000860  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a5  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	24 e0       	ldi	r18, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 34       	cpi	r26, 0x4A	; 74
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 11 01 	call	0x222	; 0x222 <main>
  74:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z8i2c_initv>:
		_delay_ms(100);
	}

	

}
  7c:	11 b8       	out	0x01, r1	; 1
  7e:	88 e4       	ldi	r24, 0x48	; 72
  80:	80 b9       	out	0x00, r24	; 0
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	86 bf       	out	0x36, r24	; 54
  86:	08 95       	ret

00000088 <_Z9i2c_startv>:
  88:	84 ea       	ldi	r24, 0xA4	; 164
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <_Z9i2c_startv+0x4>
  92:	08 95       	ret

00000094 <_Z9i2c_writeh>:
  94:	83 b9       	out	0x03, r24	; 3
  96:	84 e8       	ldi	r24, 0x84	; 132
  98:	86 bf       	out	0x36, r24	; 54
  9a:	06 b6       	in	r0, 0x36	; 54
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <_Z9i2c_writeh+0x6>
  a0:	08 95       	ret

000000a2 <_Z8i2c_readh>:
  a2:	20 e4       	ldi	r18, 0x40	; 64
  a4:	82 9f       	mul	r24, r18
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	84 68       	ori	r24, 0x84	; 132
  ac:	86 bf       	out	0x36, r24	; 54
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <_Z8i2c_readh+0xc>
  b4:	83 b1       	in	r24, 0x03	; 3
  b6:	08 95       	ret

000000b8 <_Z8i2c_stopv>:
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	84 36       	cpi	r24, 0x64	; 100
  c2:	91 05       	cpc	r25, r1
  c4:	14 f4       	brge	.+4      	; 0xca <_Z8i2c_stopv+0x12>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <_Z8i2c_stopv+0x8>
  ca:	08 95       	ret

000000cc <_Z8rtc_initv>:
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z8i2c_initv>
  d0:	0e 94 44 00 	call	0x88	; 0x88 <_Z9i2c_startv>
  d4:	80 ed       	ldi	r24, 0xD0	; 208
  d6:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
  e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8i2c_stopv>
  ea:	08 95       	ret

000000ec <_Z11rtc_setTimehhh>:
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	c8 2f       	mov	r28, r24
  f4:	d6 2f       	mov	r29, r22
  f6:	14 2f       	mov	r17, r20
  f8:	0e 94 44 00 	call	0x88	; 0x88 <_Z9i2c_startv>
  fc:	80 ed       	ldi	r24, 0xD0	; 208
  fe:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 108:	81 2f       	mov	r24, r17
 10a:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 10e:	8d 2f       	mov	r24, r29
 110:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8i2c_stopv>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <_Z11rtc_getTimePhS_S_>:
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	8b 01       	movw	r16, r22
 136:	7a 01       	movw	r14, r20
 138:	0e 94 44 00 	call	0x88	; 0x88 <_Z9i2c_startv>
 13c:	80 ed       	ldi	r24, 0xD0	; 208
 13e:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 148:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8i2c_stopv>
 14c:	0e 94 44 00 	call	0x88	; 0x88 <_Z9i2c_startv>
 150:	81 ed       	ldi	r24, 0xD1	; 209
 152:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9i2c_writeh>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8i2c_readh>
 15c:	f7 01       	movw	r30, r14
 15e:	80 83       	st	Z, r24
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8i2c_readh>
 166:	f8 01       	movw	r30, r16
 168:	80 83       	st	Z, r24
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8i2c_readh>
 170:	88 83       	st	Y, r24
 172:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8i2c_stopv>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <_Z8mcu_initv>:
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	8a bb       	out	0x1a, r24	; 26
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	88 bb       	out	0x18, r24	; 24
 192:	88 b3       	in	r24, 0x18	; 24
 194:	80 68       	ori	r24, 0x80	; 128
 196:	88 bb       	out	0x18, r24	; 24
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	81 b3       	in	r24, 0x11	; 17
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	81 bb       	out	0x11, r24	; 17
 1bc:	87 e6       	ldi	r24, 0x67	; 103
 1be:	89 b9       	out	0x09, r24	; 9
 1c0:	87 e0       	ldi	r24, 0x07	; 7
 1c2:	80 bd       	out	0x20, r24	; 32
 1c4:	88 e9       	ldi	r24, 0x98	; 152
 1c6:	8a b9       	out	0x0a, r24	; 10
 1c8:	78 94       	sei
 1ca:	0e 94 66 00 	call	0xcc	; 0xcc <_Z8rtc_initv>
 1ce:	40 e5       	ldi	r20, 0x50	; 80
 1d0:	69 e2       	ldi	r22, 0x29	; 41
 1d2:	81 e2       	ldi	r24, 0x21	; 33
 1d4:	0e 94 76 00 	call	0xec	; 0xec <_Z11rtc_setTimehhh>
 1d8:	08 95       	ret

000001da <_Z14USART_Transmith>:
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <_Z14USART_Transmith>
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	31 ee       	ldi	r19, 0xE1	; 225
 1e2:	94 e0       	ldi	r25, 0x04	; 4
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_Z14USART_Transmith+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z14USART_Transmith+0x14>
 1ee:	00 00       	nop
 1f0:	8c b9       	out	0x0c, r24	; 12
 1f2:	08 95       	ret

000001f4 <_Z8light_oni>:
 1f4:	9b b3       	in	r25, 0x1b	; 27
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <_Z8light_oni+0xc>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	8a 95       	dec	r24
 202:	e2 f7       	brpl	.-8      	; 0x1fc <_Z8light_oni+0x8>
 204:	29 2b       	or	r18, r25
 206:	2b bb       	out	0x1b, r18	; 27
 208:	08 95       	ret

0000020a <_Z9light_offi>:
 20a:	9b b3       	in	r25, 0x1b	; 27
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <_Z9light_offi+0xc>
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <_Z9light_offi+0x8>
 21a:	20 95       	com	r18
 21c:	29 23       	and	r18, r25
 21e:	2b bb       	out	0x1b, r18	; 27
 220:	08 95       	ret

00000222 <main>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <main+0x6>
 228:	1f 92       	push	r1
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	0e 94 c2 00 	call	0x184	; 0x184 <_Z8mcu_initv>
 232:	ae 01       	movw	r20, r28
 234:	4d 5f       	subi	r20, 0xFD	; 253
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	be 01       	movw	r22, r28
 23a:	6e 5f       	subi	r22, 0xFE	; 254
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 93 00 	call	0x126	; 0x126 <_Z11rtc_getTimePhS_S_>
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	95 95       	asr	r25
 24c:	87 95       	ror	r24
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	95 95       	asr	r25
 254:	87 95       	ror	r24
 256:	95 95       	asr	r25
 258:	87 95       	ror	r24
 25a:	ef e9       	ldi	r30, 0x9F	; 159
 25c:	ff e0       	ldi	r31, 0x0F	; 15
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x3c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x42>
 264:	00 00       	nop
 266:	99 81       	ldd	r25, Y+1	; 0x01
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	2a 81       	ldd	r18, Y+2	; 0x02
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	35 95       	asr	r19
 270:	27 95       	ror	r18
 272:	35 95       	asr	r19
 274:	27 95       	ror	r18
 276:	35 95       	asr	r19
 278:	27 95       	ror	r18
 27a:	35 95       	asr	r19
 27c:	27 95       	ror	r18
 27e:	ef e9       	ldi	r30, 0x9F	; 159
 280:	ff e0       	ldi	r31, 0x0F	; 15
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x60>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x66>
 288:	00 00       	nop
 28a:	3a 81       	ldd	r19, Y+2	; 0x02
 28c:	3f 70       	andi	r19, 0x0F	; 15
 28e:	4b 81       	ldd	r20, Y+3	; 0x03
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	55 95       	asr	r21
 298:	47 95       	ror	r20
 29a:	55 95       	asr	r21
 29c:	47 95       	ror	r20
 29e:	55 95       	asr	r21
 2a0:	47 95       	ror	r20
 2a2:	ef e9       	ldi	r30, 0x9F	; 159
 2a4:	ff e0       	ldi	r31, 0x0F	; 15
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x84>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x8a>
 2ac:	00 00       	nop
 2ae:	5b 81       	ldd	r21, Y+3	; 0x03
 2b0:	5f 70       	andi	r21, 0x0F	; 15
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	79 f4       	brne	.+30     	; 0x2d4 <main+0xb2>
 2b6:	91 30       	cpi	r25, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <main+0xb2>
 2ba:	23 30       	cpi	r18, 0x03	; 3
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <main+0xb2>
 2be:	31 11       	cpse	r19, r1
 2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <main+0xb2>
 2c2:	41 11       	cpse	r20, r1
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <main+0xb2>
 2c6:	51 11       	cpse	r21, r1
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <main+0xb2>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <main+0xba>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 2dc:	ff ef       	ldi	r31, 0xFF	; 255
 2de:	21 ee       	ldi	r18, 0xE1	; 225
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	f1 50       	subi	r31, 0x01	; 1
 2e4:	20 40       	sbci	r18, 0x00	; 0
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0xc0>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0xca>
 2ec:	00 00       	nop
 2ee:	a1 cf       	rjmp	.-190    	; 0x232 <main+0x10>

000002f0 <_Z18receive_UDR_stringv>:
}


//function receives incoming characters from UDR to and returns the combined formed string
char * receive_UDR_string()
{
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29

	for(int i = 0; i < 128; i++)// we don't expect to receive a string of more than 128 characters 
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	c0 38       	cpi	r28, 0x80	; 128
 2fc:	d1 05       	cpc	r29, r1
 2fe:	74 f5       	brge	.+92     	; 0x35c <_Z18receive_UDR_stringv+0x6c>
	{
		
		while(! (UCSRA & (1<<RXC))); //wait for entire character to be received in UDR
 300:	5f 9b       	sbis	0x0b, 7	; 11
 302:	fe cf       	rjmp	.-4      	; 0x300 <_Z18receive_UDR_stringv+0x10>
		
		char received_char = UDR; //we shall only get the correct character if the speeds are well synchronized
 304:	1c b1       	in	r17, 0x0c	; 12

	    light_on(DATA_IN_LED);
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>

		if ( isspace(received_char) )
 30e:	81 2f       	mov	r24, r17
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 bb 02 	call	0x576	; 0x576 <isspace>
 316:	89 2b       	or	r24, r25
 318:	91 f0       	breq	.+36     	; 0x33e <_Z18receive_UDR_stringv+0x4e>
		{
			rx_buffer[rx_index] = '\0';  // Add null terminator to the string
 31a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 31e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 322:	ee 59       	subi	r30, 0x9E	; 158
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	10 82       	st	Z, r1
			rx_index = 0;  // Reset the index
 328:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 32c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

			light_off(DATA_IN_LED);
 330:	86 e0       	ldi	r24, 0x06	; 6
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
			
			return rx_buffer;
 338:	82 e6       	ldi	r24, 0x62	; 98
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	13 c0       	rjmp	.+38     	; 0x364 <_Z18receive_UDR_stringv+0x74>
		}
		else
		{
			// Otherwise, store the received character in the buffer
			rx_buffer[rx_index] = received_char;
 33e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 342:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 346:	fc 01       	movw	r30, r24
 348:	ee 59       	subi	r30, 0x9E	; 158
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	10 83       	st	Z, r17
			rx_index++;
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 354:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

//function receives incoming characters from UDR to and returns the combined formed string
char * receive_UDR_string()
{

	for(int i = 0; i < 128; i++)// we don't expect to receive a string of more than 128 characters 
 358:	21 96       	adiw	r28, 0x01	; 1
 35a:	cf cf       	rjmp	.-98     	; 0x2fa <_Z18receive_UDR_stringv+0xa>
			rx_index++;
		}

	}
	
	light_off(DATA_IN_LED);	
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
	
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	08 95       	ret

0000036c <_Z9switch_onv>:

//function that switches on desired light using mobile app
void switch_on()
{

	char  room_light = *(receive_UDR_string());
 36c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z18receive_UDR_stringv>
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
	
	
	if (room_light == '1')
 374:	81 33       	cpi	r24, 0x31	; 49
 376:	29 f4       	brne	.+10     	; 0x382 <_Z9switch_onv+0x16>
	{
		light_on(LLT1);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 380:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT1);
	}
	else if (room_light == '2')
 382:	82 33       	cpi	r24, 0x32	; 50
 384:	29 f4       	brne	.+10     	; 0x390 <_Z9switch_onv+0x24>
	{
		light_on(LLT2);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 38e:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT2);
	}
	else if (room_light == '3')
 390:	83 33       	cpi	r24, 0x33	; 51
 392:	29 f4       	brne	.+10     	; 0x39e <_Z9switch_onv+0x32>
	{
		light_on(LLT3);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 39c:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT3);
	}
	else if (room_light == '4')
 39e:	84 33       	cpi	r24, 0x34	; 52
 3a0:	29 f4       	brne	.+10     	; 0x3ac <_Z9switch_onv+0x40>
	{
		light_on(LLT4);
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 3aa:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT4);
	}
	else if (room_light == '5')
 3ac:	85 33       	cpi	r24, 0x35	; 53
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <_Z9switch_onv+0x4c>
	{
		light_on(SECURITY);
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
 3b8:	08 95       	ret

000003ba <_Z10switch_offv>:

//function that switches off desired light using mobile app
void switch_off()
{

	char  room_light = *(receive_UDR_string());
 3ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z18receive_UDR_stringv>
 3be:	fc 01       	movw	r30, r24
 3c0:	80 81       	ld	r24, Z
	
	if (room_light == '1')
 3c2:	81 33       	cpi	r24, 0x31	; 49
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <_Z10switch_offv+0x16>
	{
		light_off(LLT1);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 3ce:	08 95       	ret
	}
	else if (room_light == '2')
 3d0:	82 33       	cpi	r24, 0x32	; 50
 3d2:	29 f4       	brne	.+10     	; 0x3de <_Z10switch_offv+0x24>
	{
		light_off(LLT2);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 3dc:	08 95       	ret
	}
	else if (room_light == '3')
 3de:	83 33       	cpi	r24, 0x33	; 51
 3e0:	29 f4       	brne	.+10     	; 0x3ec <_Z10switch_offv+0x32>
	{
		light_off(LLT3);
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 3ea:	08 95       	ret
	}
	else if (room_light == '4')
 3ec:	84 33       	cpi	r24, 0x34	; 52
 3ee:	29 f4       	brne	.+10     	; 0x3fa <_Z10switch_offv+0x40>
	{
		light_off(LLT4);
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 3f8:	08 95       	ret
	}
	else if (room_light == '5')
 3fa:	85 33       	cpi	r24, 0x35	; 53
 3fc:	21 f4       	brne	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		light_off(SECURITY);
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
 406:	08 95       	ret

00000408 <_Z21USART_Transmit_StringPc>:

	
}

void USART_Transmit_String(char* string)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
	while (*string)
 40e:	88 81       	ld	r24, Y
 410:	88 23       	and	r24, r24
 412:	61 f0       	breq	.+24     	; 0x42c <_Z21USART_Transmit_StringPc+0x24>
	{
		light_on(DATA_OUT_LED);
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>

		USART_Transmit(*string);
 41c:	89 91       	ld	r24, Y+
 41e:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z14USART_Transmith>

		light_off(DATA_OUT_LED);
 422:	87 e0       	ldi	r24, 0x07	; 7
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
	
}

void USART_Transmit_String(char* string)
{
	while (*string)
 42a:	f1 cf       	rjmp	.-30     	; 0x40e <_Z21USART_Transmit_StringPc+0x6>
		light_off(DATA_OUT_LED);

		string++;
	}
	
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <_Z14store_passwordPc>:


//store user password in EEPROM
void store_password(char *user_password)
{
	eeprom_update_block((const void*)user_password, (void*)EEPROM_ADDRESS, strlen(user_password) + 1); //store password
 432:	fc 01       	movw	r30, r24
 434:	01 90       	ld	r0, Z+
 436:	00 20       	and	r0, r0
 438:	e9 f7       	brne	.-6      	; 0x434 <_Z14store_passwordPc+0x2>
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	af 01       	movw	r20, r30
 43e:	48 1b       	sub	r20, r24
 440:	59 0b       	sbc	r21, r25
 442:	4f 5f       	subi	r20, 0xFF	; 255
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <eeprom_update_block>
 44e:	08 95       	ret

00000450 <_Z14store_usernamePc>:
}

//store username in EEPROM
void store_username(char *username)
{
	eeprom_update_block((const void*)username, (void*)(EEPROM_ADDRESS + 128), strlen(username) + 1); //store username
 450:	fc 01       	movw	r30, r24
 452:	01 90       	ld	r0, Z+
 454:	00 20       	and	r0, r0
 456:	e9 f7       	brne	.-6      	; 0x452 <_Z14store_usernamePc+0x2>
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	af 01       	movw	r20, r30
 45c:	48 1b       	sub	r20, r24
 45e:	59 0b       	sbc	r21, r25
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	60 e8       	ldi	r22, 0x80	; 128
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	0e 94 d7 02 	call	0x5ae	; 0x5ae <eeprom_update_block>
 46c:	08 95       	ret

0000046e <_Z13register_userv>:
}

void register_user()
{
	//receive password and store it in eeprom 
	char * username = receive_UDR_string();
 46e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z18receive_UDR_stringv>
	store_username(username);
 472:	0e 94 28 02 	call	0x450	; 0x450 <_Z14store_usernamePc>

	//receive username and store it in eeprom 
	char * password = receive_UDR_string();
 476:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z18receive_UDR_stringv>
	store_password(password);
 47a:	0e 94 19 02 	call	0x432	; 0x432 <_Z14store_passwordPc>
 47e:	08 95       	ret

00000480 <_Z12get_passwordPc>:
} 

//retrieve user password from EEPROM
void get_password(char password[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)password, (const void*)EEPROM_ADDRESS, PASSWORD_LENGTH);
 480:	44 e1       	ldi	r20, 0x14	; 20
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	0e 94 c7 02 	call	0x58e	; 0x58e <eeprom_read_block>
 48c:	08 95       	ret

0000048e <_Z12get_usernamePc>:
}

//retrieve username from EEPROM
void get_username(char username[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)username, (const void*)(EEPROM_ADDRESS + 128), PASSWORD_LENGTH);
 48e:	44 e1       	ldi	r20, 0x14	; 20
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	60 e8       	ldi	r22, 0x80	; 128
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	0e 94 c7 02 	call	0x58e	; 0x58e <eeprom_read_block>
 49a:	08 95       	ret

0000049c <_Z5loginv>:
}


//sends the password and username for verification to the mobile app at login
void login()
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	a8 97       	sbiw	r28, 0x28	; 40
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
	char password[PASSWORD_LENGTH];
	char username[PASSWORD_LENGTH];

	//retrieve username and password
	get_password(password);
 4b0:	ce 01       	movw	r24, r28
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	0e 94 40 02 	call	0x480	; 0x480 <_Z12get_passwordPc>
	get_username(username);
 4b8:	ce 01       	movw	r24, r28
 4ba:	45 96       	adiw	r24, 0x15	; 21
 4bc:	0e 94 47 02 	call	0x48e	; 0x48e <_Z12get_usernamePc>


	//transmit both username and password
	USART_Transmit_String(username);
 4c0:	ce 01       	movw	r24, r28
 4c2:	45 96       	adiw	r24, 0x15	; 21
 4c4:	0e 94 04 02 	call	0x408	; 0x408 <_Z21USART_Transmit_StringPc>
	USART_Transmit_String(password);
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	0e 94 04 02 	call	0x408	; 0x408 <_Z21USART_Transmit_StringPc>
	
}
 4d0:	a8 96       	adiw	r28, 0x28	; 40
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <__vector_13>:
		// }
	}
}


ISR(USART_RXC_vect) {
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	
	light_on(APP_LED);
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z8light_oni>
	
	
	char flag = UDR;  // Read the received character
 50c:	8c b1       	in	r24, 0x0c	; 12
	
	

	switch (flag)
 50e:	8c 34       	cpi	r24, 0x4C	; 76
 510:	49 f0       	breq	.+18     	; 0x524 <__vector_13+0x42>
 512:	18 f4       	brcc	.+6      	; 0x51a <__vector_13+0x38>
 514:	86 34       	cpi	r24, 0x46	; 70
 516:	79 f0       	breq	.+30     	; 0x536 <__vector_13+0x54>
 518:	10 c0       	rjmp	.+32     	; 0x53a <__vector_13+0x58>
 51a:	8f 34       	cpi	r24, 0x4F	; 79
 51c:	49 f0       	breq	.+18     	; 0x530 <__vector_13+0x4e>
 51e:	82 35       	cpi	r24, 0x52	; 82
 520:	21 f0       	breq	.+8      	; 0x52a <__vector_13+0x48>
 522:	0b c0       	rjmp	.+22     	; 0x53a <__vector_13+0x58>
	{
	case 'L': //login user 
		login();
 524:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z5loginv>
		break;
 528:	08 c0       	rjmp	.+16     	; 0x53a <__vector_13+0x58>
	
	case 'R': //register user
		register_user();
 52a:	0e 94 37 02 	call	0x46e	; 0x46e <_Z13register_userv>
		break;
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__vector_13+0x58>

	case 'O': //switch on light
		switch_on();
 530:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z9switch_onv>
		break;
 534:	02 c0       	rjmp	.+4      	; 0x53a <__vector_13+0x58>

	case 'F': //switch off light
		switch_off();
 536:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z10switch_offv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	81 ee       	ldi	r24, 0xE1	; 225
 53e:	94 e0       	ldi	r25, 0x04	; 4
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__vector_13+0x5e>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__vector_13+0x68>
 54a:	00 00       	nop
		break;
	}
	
	_delay_ms(100);

	light_off(APP_LED);
 54c:	85 e0       	ldi	r24, 0x05	; 5
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9light_offi>
	
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <isspace>:
 576:	91 11       	cpse	r25, r1
 578:	0c 94 c4 02 	jmp	0x588	; 0x588 <__ctype_isfalse>
 57c:	80 32       	cpi	r24, 0x20	; 32
 57e:	19 f0       	breq	.+6      	; 0x586 <isspace+0x10>
 580:	89 50       	subi	r24, 0x09	; 9
 582:	85 50       	subi	r24, 0x05	; 5
 584:	c8 f7       	brcc	.-14     	; 0x578 <isspace+0x2>
 586:	08 95       	ret

00000588 <__ctype_isfalse>:
 588:	99 27       	eor	r25, r25
 58a:	88 27       	eor	r24, r24

0000058c <__ctype_istrue>:
 58c:	08 95       	ret

0000058e <eeprom_read_block>:
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22

00000592 <eeprom_read_blraw>:
 592:	fc 01       	movw	r30, r24
 594:	e1 99       	sbic	0x1c, 1	; 28
 596:	fe cf       	rjmp	.-4      	; 0x594 <eeprom_read_blraw+0x2>
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <eeprom_read_blraw+0x14>
 59a:	ff bb       	out	0x1f, r31	; 31
 59c:	ee bb       	out	0x1e, r30	; 30
 59e:	e0 9a       	sbi	0x1c, 0	; 28
 5a0:	31 96       	adiw	r30, 0x01	; 1
 5a2:	0d b2       	in	r0, 0x1d	; 29
 5a4:	0d 92       	st	X+, r0
 5a6:	41 50       	subi	r20, 0x01	; 1
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	b8 f7       	brcc	.-18     	; 0x59a <eeprom_read_blraw+0x8>
 5ac:	08 95       	ret

000005ae <eeprom_update_block>:
 5ae:	dc 01       	movw	r26, r24
 5b0:	a4 0f       	add	r26, r20
 5b2:	b5 1f       	adc	r27, r21
 5b4:	41 50       	subi	r20, 0x01	; 1
 5b6:	50 40       	sbci	r21, 0x00	; 0
 5b8:	48 f0       	brcs	.+18     	; 0x5cc <eeprom_update_block+0x1e>
 5ba:	cb 01       	movw	r24, r22
 5bc:	84 0f       	add	r24, r20
 5be:	95 1f       	adc	r25, r21
 5c0:	2e 91       	ld	r18, -X
 5c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <eeprom_update_r18>
 5c6:	41 50       	subi	r20, 0x01	; 1
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	d0 f7       	brcc	.-12     	; 0x5c0 <eeprom_update_block+0x12>
 5cc:	08 95       	ret

000005ce <eeprom_update_byte>:
 5ce:	26 2f       	mov	r18, r22

000005d0 <eeprom_update_r18>:
 5d0:	e1 99       	sbic	0x1c, 1	; 28
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <eeprom_update_r18>
 5d4:	9f bb       	out	0x1f, r25	; 31
 5d6:	8e bb       	out	0x1e, r24	; 30
 5d8:	e0 9a       	sbi	0x1c, 0	; 28
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	0d b2       	in	r0, 0x1d	; 29
 5de:	02 16       	cp	r0, r18
 5e0:	31 f0       	breq	.+12     	; 0x5ee <eeprom_update_r18+0x1e>
 5e2:	2d bb       	out	0x1d, r18	; 29
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	e2 9a       	sbi	0x1c, 2	; 28
 5ea:	e1 9a       	sbi	0x1c, 1	; 28
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
