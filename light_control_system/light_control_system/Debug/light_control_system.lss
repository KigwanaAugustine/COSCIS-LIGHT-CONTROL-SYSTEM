
light_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008aa  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030b  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000473  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000019d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z21check_light_intensityv>:
}

//retrieve user password from eeprom
void get_password(char password[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)password, (const void*)EEPROM_ADDRESS, PASSWORD_LENGTH);
  6c:	9d 99       	sbic	0x13, 5	; 19
  6e:	03 c0       	rjmp	.+6      	; 0x76 <_Z21check_light_intensityv+0xa>
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

0000007c <_Z14switch_pressedi>:
  7c:	23 b3       	in	r18, 0x13	; 19
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <_Z14switch_pressedi+0xa>
  82:	35 95       	asr	r19
  84:	27 95       	ror	r18
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <_Z14switch_pressedi+0x6>
  8a:	20 fd       	sbrc	r18, 0
  8c:	03 c0       	rjmp	.+6      	; 0x94 <_Z14switch_pressedi+0x18>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <_Z8mcu_initv>:
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	14 ba       	out	0x14, r1	; 20
  a0:	08 95       	ret

000000a2 <_Z8light_oni>:
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <_Z8light_oni+0xc>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <_Z8light_oni+0x8>
  b2:	29 2b       	or	r18, r25
  b4:	2b bb       	out	0x1b, r18	; 27
  b6:	08 95       	ret

000000b8 <_Z9light_offi>:
  b8:	9b b3       	in	r25, 0x1b	; 27
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <_Z9light_offi+0xc>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <_Z9light_offi+0x8>
  c8:	20 95       	com	r18
  ca:	29 23       	and	r18, r25
  cc:	2b bb       	out	0x1b, r18	; 27
  ce:	08 95       	ret

000000d0 <_Z19manual_light_switchv>:


void manual_light_switch()
{
	
	if (switch_pressed(LLT1_SWITCH))
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14switch_pressedi>
  d8:	89 2b       	or	r24, r25
  da:	29 f0       	breq	.+10     	; 0xe6 <_Z19manual_light_switchv+0x16>
	{
		light_on(LLT1);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
  e4:	04 c0       	rjmp	.+8      	; 0xee <_Z19manual_light_switchv+0x1e>
	}
	else
	{
		light_off(LLT1);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9light_offi>
	}
	
	
	if(switch_pressed(LLT2_SWITCH))
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14switch_pressedi>
  f6:	89 2b       	or	r24, r25
  f8:	29 f0       	breq	.+10     	; 0x104 <_Z19manual_light_switchv+0x34>
	{
		light_on(LLT2);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
 102:	04 c0       	rjmp	.+8      	; 0x10c <_Z19manual_light_switchv+0x3c>
	}
	else
	{
		light_off(LLT2);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9light_offi>
	}
	
	if(switch_pressed(LLT3_SWITCH))
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14switch_pressedi>
 114:	89 2b       	or	r24, r25
 116:	29 f0       	breq	.+10     	; 0x122 <_Z19manual_light_switchv+0x52>
	{
		light_on(LLT3);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
 120:	04 c0       	rjmp	.+8      	; 0x12a <_Z19manual_light_switchv+0x5a>
	}
	else
	{
		light_off(LLT3);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9light_offi>
	}
	
	if(switch_pressed(LLT4_SWITCH))
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14switch_pressedi>
 132:	89 2b       	or	r24, r25
 134:	29 f0       	breq	.+10     	; 0x140 <_Z19manual_light_switchv+0x70>
	{
		light_on(LLT4);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
 13e:	04 c0       	rjmp	.+8      	; 0x148 <_Z19manual_light_switchv+0x78>
	}
	else
	{
		light_off(LLT4);
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9light_offi>
	}
	
	if(switch_pressed(SECURITY_SWITCH))
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14switch_pressedi>
 150:	89 2b       	or	r24, r25
 152:	29 f0       	breq	.+10     	; 0x15e <_Z19manual_light_switchv+0x8e>
	{
		light_on(SECURITY);
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
 15c:	08 95       	ret
	}
	else
	{
		light_off(SECURITY);
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9light_offi>
 166:	08 95       	ret

00000168 <main>:
int  switch_pressed(int pin);
int check_light_intensity();

int main(void)
{
	mcu_init();
 168:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z8mcu_initv>
	
    while (1)
	{
		manual_light_switch();
 16c:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z19manual_light_switchv>

		if(check_light_intensity())  //if darkness is detected, turn on security light
 170:	0e 94 36 00 	call	0x6c	; 0x6c <_Z21check_light_intensityv>
 174:	89 2b       	or	r24, r25
 176:	d1 f3       	breq	.-12     	; 0x16c <main+0x4>
		{
			light_on(SECURITY);
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8light_oni>
 180:	f5 cf       	rjmp	.-22     	; 0x16c <main+0x4>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
