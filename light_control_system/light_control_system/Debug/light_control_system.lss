
light_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  00800060  00800060  000004e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000550  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e3  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000794  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091c  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ee  00000000  00000000  00003213  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3e       	cpi	r26, 0xE2	; 226
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  74:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z9open_doorii>:
	{
		return 0;
	}

	
}
  7c:	48 b3       	in	r20, 0x18	; 24
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	f9 01       	movw	r30, r18
  84:	02 c0       	rjmp	.+4      	; 0x8a <_Z9open_doorii+0xe>
  86:	ee 0f       	add	r30, r30
  88:	ff 1f       	adc	r31, r31
  8a:	8a 95       	dec	r24
  8c:	e2 f7       	brpl	.-8      	; 0x86 <_Z9open_doorii+0xa>
  8e:	cf 01       	movw	r24, r30
  90:	84 2b       	or	r24, r20
  92:	88 bb       	out	0x18, r24	; 24
  94:	88 b3       	in	r24, 0x18	; 24
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z9open_doorii+0x20>
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <_Z9open_doorii+0x1c>
  a0:	20 95       	com	r18
  a2:	28 23       	and	r18, r24
  a4:	28 bb       	out	0x18, r18	; 24
  a6:	08 95       	ret

000000a8 <_Z10close_doorii>:
  a8:	98 b3       	in	r25, 0x18	; 24
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_Z10close_doorii+0xe>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <_Z10close_doorii+0xa>
  ba:	49 2b       	or	r20, r25
  bc:	48 bb       	out	0x18, r20	; 24
  be:	98 b3       	in	r25, 0x18	; 24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <_Z10close_doorii+0x1e>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <_Z10close_doorii+0x1a>
  ca:	20 95       	com	r18
  cc:	29 23       	and	r18, r25
  ce:	28 bb       	out	0x18, r18	; 24
  d0:	08 95       	ret

000000d2 <_Z18receive_UDR_stringv>:
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
  dc:	c0 38       	cpi	r28, 0x80	; 128
  de:	d1 05       	cpc	r29, r1
  e0:	34 f5       	brge	.+76     	; 0x12e <_Z18receive_UDR_stringv+0x5c>
  e2:	5f 9b       	sbis	0x0b, 7	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <_Z18receive_UDR_stringv+0x10>
  e6:	1c b1       	in	r17, 0x0c	; 12
  e8:	81 2f       	mov	r24, r17
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 f7 01 	call	0x3ee	; 0x3ee <isspace>
  f0:	89 2b       	or	r24, r25
  f2:	71 f0       	breq	.+28     	; 0x110 <_Z18receive_UDR_stringv+0x3e>
  f4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fc:	ee 59       	subi	r30, 0x9E	; 158
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	10 82       	st	Z, r1
 102:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	82 e6       	ldi	r24, 0x62	; 98
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0f c0       	rjmp	.+30     	; 0x12e <_Z18receive_UDR_stringv+0x5c>
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	fc 01       	movw	r30, r24
 11a:	ee 59       	subi	r30, 0x9E	; 158
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	10 83       	st	Z, r17
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	d7 cf       	rjmp	.-82     	; 0xdc <_Z18receive_UDR_stringv+0xa>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	08 95       	ret

00000136 <_Z8mcu_initv>:
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	8a bb       	out	0x1a, r24	; 26
 13a:	14 ba       	out	0x14, r1	; 20
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	87 bb       	out	0x17, r24	; 23
 140:	88 b3       	in	r24, 0x18	; 24
 142:	80 64       	ori	r24, 0x40	; 64
 144:	88 bb       	out	0x18, r24	; 24
 146:	88 b3       	in	r24, 0x18	; 24
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	87 e6       	ldi	r24, 0x67	; 103
 14e:	89 b9       	out	0x09, r24	; 9
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	80 bd       	out	0x20, r24	; 32
 154:	88 e9       	ldi	r24, 0x98	; 152
 156:	8a b9       	out	0x0a, r24	; 10
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <_Z21check_light_intensityv>:
 15c:	9d 99       	sbic	0x13, 5	; 19
 15e:	03 c0       	rjmp	.+6      	; 0x166 <_Z21check_light_intensityv+0xa>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret

0000016c <_Z14USART_Transmith>:


void USART_Transmit(unsigned char data)
{
	// Wait for empty transmit buffer
	while (!(UCSRA & (1 << UDRE)));
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <_Z14USART_Transmith>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	31 ee       	ldi	r19, 0xE1	; 225
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <_Z14USART_Transmith+0xa>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <_Z14USART_Transmith+0x14>
 180:	00 00       	nop

	_delay_ms(100);
	
	// Put data into buffer, sends the data
	UDR = data;
 182:	8c b9       	out	0x0c, r24	; 12
 184:	08 95       	ret

00000186 <_Z21USART_Transmit_StringPc>:
}

void USART_Transmit_String(char* string)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
	while (*string)
 18c:	88 81       	ld	r24, Y
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <_Z21USART_Transmit_StringPc+0x14>
	{
		USART_Transmit(*string);
 192:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z14USART_Transmith>
		string++;
 196:	21 96       	adiw	r28, 0x01	; 1
	UDR = data;
}

void USART_Transmit_String(char* string)
{
	while (*string)
 198:	f9 cf       	rjmp	.-14     	; 0x18c <_Z21USART_Transmit_StringPc+0x6>
	{
		USART_Transmit(*string);
		string++;
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <_Z8light_oni>:


//switch on light connected to pin 
void light_on(int pin)
{
	LIGHTS_PORT |= (1<<pin);
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <_Z8light_oni+0xc>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <_Z8light_oni+0x8>
 1b0:	29 2b       	or	r18, r25
 1b2:	2b bb       	out	0x1b, r18	; 27
 1b4:	08 95       	ret

000001b6 <_Z9switch_onv>:

//function that switches on desired light using mobile app
void switch_on()
{

	char  room_light = *(receive_UDR_string());
 1b6:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z18receive_UDR_stringv>
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
	
	
	if (room_light == '1')
 1be:	81 33       	cpi	r24, 0x31	; 49
 1c0:	29 f4       	brne	.+10     	; 0x1cc <_Z9switch_onv+0x16>
	{
		light_on(LLT1);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 1ca:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT1);
	}
	else if (room_light == '2')
 1cc:	82 33       	cpi	r24, 0x32	; 50
 1ce:	29 f4       	brne	.+10     	; 0x1da <_Z9switch_onv+0x24>
	{
		light_on(LLT2);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 1d8:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT2);
	}
	else if (room_light == '3')
 1da:	83 33       	cpi	r24, 0x33	; 51
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <_Z9switch_onv+0x32>
	{
		light_on(LLT3);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 1e6:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT3);
	}
	else if (room_light == '4')
 1e8:	84 33       	cpi	r24, 0x34	; 52
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <_Z9switch_onv+0x40>
	{
		light_on(LLT4);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 1f4:	08 95       	ret
		// _delay_ms(100);
		// light_off(LLT4);
	}
	else if (room_light == '5')
 1f6:	85 33       	cpi	r24, 0x35	; 53
 1f8:	21 f4       	brne	.+8      	; 0x202 <_Z9switch_onv+0x4c>
	{
		light_on(SECURITY);
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 202:	08 95       	ret

00000204 <_Z9light_offi>:
}

//switch on light connected to pin 
void light_off(int pin)
{
	LIGHTS_PORT &= ~(1<<pin);
 204:	9b b3       	in	r25, 0x1b	; 27
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z9light_offi+0xc>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <_Z9light_offi+0x8>
 214:	20 95       	com	r18
 216:	29 23       	and	r18, r25
 218:	2b bb       	out	0x1b, r18	; 27
 21a:	08 95       	ret

0000021c <main>:


int main(void)
{
		
	mcu_init(); //initialize microcontroller
 21c:	0e 94 9b 00 	call	0x136	; 0x136 <_Z8mcu_initv>
	{
	
		//close_door(LLT1_DOOR_PIN1, LLT1_DOOR_PIN2);

		//opening door
		if (! ((DOOR_PIN) & (1<<LLT1_DOOR_OPEN_BUTTON)) )
 220:	b6 99       	sbic	0x16, 6	; 22
 222:	06 c0       	rjmp	.+12     	; 0x230 <main+0x14>
		{
			open_door(LLT1_DOOR_PIN1, LLT1_DOOR_PIN2);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z9open_doorii>
		// 	PORTB |= (1 << LLT1_DOOR_OPEN_BUTTON);
		// }


		//closing door
		if ( !((DOOR_PIN) & (1<<LLT1_DOOR_CLOSE_BUTTON)) )
 230:	b7 99       	sbic	0x16, 7	; 22
 232:	06 c0       	rjmp	.+12     	; 0x240 <main+0x24>
		{
			close_door(LLT1_DOOR_PIN1, LLT1_DOOR_PIN2);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 54 00 	call	0xa8	; 0xa8 <_Z10close_doorii>
		// }

		

		//turn on security light when low light intensity is detected
		if(check_light_intensity())
 240:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z21check_light_intensityv>
 244:	89 2b       	or	r24, r25
 246:	29 f0       	breq	.+10     	; 0x252 <main+0x36>
		{
			light_on(SECURITY);
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
 250:	e7 cf       	rjmp	.-50     	; 0x220 <main+0x4>
		}
		else
		{
			light_off(SECURITY);
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 25a:	e2 cf       	rjmp	.-60     	; 0x220 <main+0x4>

0000025c <_Z10switch_offv>:

//function that switches off desired light using mobile app
void switch_off()
{

	char  room_light = *(receive_UDR_string());
 25c:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z18receive_UDR_stringv>
 260:	fc 01       	movw	r30, r24
 262:	80 81       	ld	r24, Z
	
	if (room_light == '1')
 264:	81 33       	cpi	r24, 0x31	; 49
 266:	29 f4       	brne	.+10     	; 0x272 <_Z10switch_offv+0x16>
	{
		light_off(LLT1);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 270:	08 95       	ret
	}
	else if (room_light == '2')
 272:	82 33       	cpi	r24, 0x32	; 50
 274:	29 f4       	brne	.+10     	; 0x280 <_Z10switch_offv+0x24>
	{
		light_off(LLT2);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 27e:	08 95       	ret
	}
	else if (room_light == '3')
 280:	83 33       	cpi	r24, 0x33	; 51
 282:	29 f4       	brne	.+10     	; 0x28e <_Z10switch_offv+0x32>
	{
		light_off(LLT3);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 28c:	08 95       	ret
	}
	else if (room_light == '4')
 28e:	84 33       	cpi	r24, 0x34	; 52
 290:	29 f4       	brne	.+10     	; 0x29c <_Z10switch_offv+0x40>
	{
		light_off(LLT4);
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 29a:	08 95       	ret
	}
	else if (room_light == '5')
 29c:	85 33       	cpi	r24, 0x35	; 53
 29e:	21 f4       	brne	.+8      	; 0x2a8 <_Z10switch_offv+0x4c>
	{
		light_off(SECURITY);
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
 2a8:	08 95       	ret

000002aa <_Z14store_passwordPc>:


//store user password in EEPROM
void store_password(char *user_password)
{
	eeprom_update_block((const void*)user_password, (void*)EEPROM_ADDRESS, strlen(user_password) + 1); //store password
 2aa:	fc 01       	movw	r30, r24
 2ac:	01 90       	ld	r0, Z+
 2ae:	00 20       	and	r0, r0
 2b0:	e9 f7       	brne	.-6      	; 0x2ac <_Z14store_passwordPc+0x2>
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	af 01       	movw	r20, r30
 2b6:	48 1b       	sub	r20, r24
 2b8:	59 0b       	sbc	r21, r25
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0e 94 13 02 	call	0x426	; 0x426 <eeprom_update_block>
 2c6:	08 95       	ret

000002c8 <_Z14store_usernamePc>:
}

//store username in EEPROM
void store_username(char *username)
{
	eeprom_update_block((const void*)username, (void*)(EEPROM_ADDRESS + 128), strlen(username) + 1); //store username
 2c8:	fc 01       	movw	r30, r24
 2ca:	01 90       	ld	r0, Z+
 2cc:	00 20       	and	r0, r0
 2ce:	e9 f7       	brne	.-6      	; 0x2ca <_Z14store_usernamePc+0x2>
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	af 01       	movw	r20, r30
 2d4:	48 1b       	sub	r20, r24
 2d6:	59 0b       	sbc	r21, r25
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	60 e8       	ldi	r22, 0x80	; 128
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	0e 94 13 02 	call	0x426	; 0x426 <eeprom_update_block>
 2e4:	08 95       	ret

000002e6 <_Z13register_userv>:
}

void register_user()
{
	//receive password and store it in eeprom 
	char * username = receive_UDR_string();
 2e6:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z18receive_UDR_stringv>
	store_username(username);
 2ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14store_usernamePc>

	//receive username and store it in eeprom 
	char * password = receive_UDR_string();
 2ee:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z18receive_UDR_stringv>
	store_password(password);
 2f2:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z14store_passwordPc>
 2f6:	08 95       	ret

000002f8 <_Z12get_passwordPc>:
} 

//retrieve user password from EEPROM
void get_password(char password[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)password, (const void*)EEPROM_ADDRESS, PASSWORD_LENGTH);
 2f8:	44 e1       	ldi	r20, 0x14	; 20
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 03 02 	call	0x406	; 0x406 <eeprom_read_block>
 304:	08 95       	ret

00000306 <_Z12get_usernamePc>:
}

//retrieve username from EEPROM
void get_username(char username[PASSWORD_LENGTH])
{
	eeprom_read_block((void*)username, (const void*)(EEPROM_ADDRESS + 128), PASSWORD_LENGTH);
 306:	44 e1       	ldi	r20, 0x14	; 20
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	60 e8       	ldi	r22, 0x80	; 128
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	0e 94 03 02 	call	0x406	; 0x406 <eeprom_read_block>
 312:	08 95       	ret

00000314 <_Z5loginv>:
}


//sends the password and username for verification to the mobile app at login
void login()
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	a8 97       	sbiw	r28, 0x28	; 40
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
	char password[PASSWORD_LENGTH];
	char username[PASSWORD_LENGTH];

	//retrieve username and password
	get_password(password);
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z12get_passwordPc>
	get_username(username);
 330:	ce 01       	movw	r24, r28
 332:	45 96       	adiw	r24, 0x15	; 21
 334:	0e 94 83 01 	call	0x306	; 0x306 <_Z12get_usernamePc>


	//transmit both username and password
	USART_Transmit_String(username);
 338:	ce 01       	movw	r24, r28
 33a:	45 96       	adiw	r24, 0x15	; 21
 33c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z21USART_Transmit_StringPc>
	USART_Transmit_String(password);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 c3 00 	call	0x186	; 0x186 <_Z21USART_Transmit_StringPc>
	
}
 348:	a8 96       	adiw	r28, 0x28	; 40
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <__vector_13>:
		}
	}
}


ISR(USART_RXC_vect) {
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	3f 93       	push	r19
 368:	4f 93       	push	r20
 36a:	5f 93       	push	r21
 36c:	6f 93       	push	r22
 36e:	7f 93       	push	r23
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	af 93       	push	r26
 376:	bf 93       	push	r27
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31
	
	light_on(APP_LED);
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8light_oni>
	
	
	char flag = UDR;  // Read the received character
 384:	8c b1       	in	r24, 0x0c	; 12
	
	

	switch (flag)
 386:	8c 34       	cpi	r24, 0x4C	; 76
 388:	49 f0       	breq	.+18     	; 0x39c <__vector_13+0x42>
 38a:	18 f4       	brcc	.+6      	; 0x392 <__vector_13+0x38>
 38c:	86 34       	cpi	r24, 0x46	; 70
 38e:	79 f0       	breq	.+30     	; 0x3ae <__vector_13+0x54>
 390:	10 c0       	rjmp	.+32     	; 0x3b2 <__vector_13+0x58>
 392:	8f 34       	cpi	r24, 0x4F	; 79
 394:	49 f0       	breq	.+18     	; 0x3a8 <__vector_13+0x4e>
 396:	82 35       	cpi	r24, 0x52	; 82
 398:	21 f0       	breq	.+8      	; 0x3a2 <__vector_13+0x48>
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <__vector_13+0x58>
	{
	case 'L': //login user 
		login();
 39c:	0e 94 8a 01 	call	0x314	; 0x314 <_Z5loginv>
		break;
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <__vector_13+0x58>
	
	case 'R': //register user
		register_user();
 3a2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_Z13register_userv>
		break;
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_13+0x58>

	case 'O': //switch on light
		switch_on();
 3a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z9switch_onv>
		break;
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__vector_13+0x58>

	case 'F': //switch off light
		switch_off();
 3ae:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z10switch_offv>
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	81 ee       	ldi	r24, 0xE1	; 225
 3b6:	94 e0       	ldi	r25, 0x04	; 4
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <__vector_13+0x5e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <__vector_13+0x68>
 3c2:	00 00       	nop
		break;
	}
	
	_delay_ms(100);

	light_off(APP_LED);
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 02 01 	call	0x204	; 0x204 <_Z9light_offi>
	
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <isspace>:
 3ee:	91 11       	cpse	r25, r1
 3f0:	0c 94 00 02 	jmp	0x400	; 0x400 <__ctype_isfalse>
 3f4:	80 32       	cpi	r24, 0x20	; 32
 3f6:	19 f0       	breq	.+6      	; 0x3fe <isspace+0x10>
 3f8:	89 50       	subi	r24, 0x09	; 9
 3fa:	85 50       	subi	r24, 0x05	; 5
 3fc:	c8 f7       	brcc	.-14     	; 0x3f0 <isspace+0x2>
 3fe:	08 95       	ret

00000400 <__ctype_isfalse>:
 400:	99 27       	eor	r25, r25
 402:	88 27       	eor	r24, r24

00000404 <__ctype_istrue>:
 404:	08 95       	ret

00000406 <eeprom_read_block>:
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22

0000040a <eeprom_read_blraw>:
 40a:	fc 01       	movw	r30, r24
 40c:	e1 99       	sbic	0x1c, 1	; 28
 40e:	fe cf       	rjmp	.-4      	; 0x40c <eeprom_read_blraw+0x2>
 410:	06 c0       	rjmp	.+12     	; 0x41e <eeprom_read_blraw+0x14>
 412:	ff bb       	out	0x1f, r31	; 31
 414:	ee bb       	out	0x1e, r30	; 30
 416:	e0 9a       	sbi	0x1c, 0	; 28
 418:	31 96       	adiw	r30, 0x01	; 1
 41a:	0d b2       	in	r0, 0x1d	; 29
 41c:	0d 92       	st	X+, r0
 41e:	41 50       	subi	r20, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	b8 f7       	brcc	.-18     	; 0x412 <eeprom_read_blraw+0x8>
 424:	08 95       	ret

00000426 <eeprom_update_block>:
 426:	dc 01       	movw	r26, r24
 428:	a4 0f       	add	r26, r20
 42a:	b5 1f       	adc	r27, r21
 42c:	41 50       	subi	r20, 0x01	; 1
 42e:	50 40       	sbci	r21, 0x00	; 0
 430:	48 f0       	brcs	.+18     	; 0x444 <eeprom_update_block+0x1e>
 432:	cb 01       	movw	r24, r22
 434:	84 0f       	add	r24, r20
 436:	95 1f       	adc	r25, r21
 438:	2e 91       	ld	r18, -X
 43a:	0e 94 24 02 	call	0x448	; 0x448 <eeprom_update_r18>
 43e:	41 50       	subi	r20, 0x01	; 1
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	d0 f7       	brcc	.-12     	; 0x438 <eeprom_update_block+0x12>
 444:	08 95       	ret

00000446 <eeprom_update_byte>:
 446:	26 2f       	mov	r18, r22

00000448 <eeprom_update_r18>:
 448:	e1 99       	sbic	0x1c, 1	; 28
 44a:	fe cf       	rjmp	.-4      	; 0x448 <eeprom_update_r18>
 44c:	9f bb       	out	0x1f, r25	; 31
 44e:	8e bb       	out	0x1e, r24	; 30
 450:	e0 9a       	sbi	0x1c, 0	; 28
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	0d b2       	in	r0, 0x1d	; 29
 456:	02 16       	cp	r0, r18
 458:	31 f0       	breq	.+12     	; 0x466 <eeprom_update_r18+0x1e>
 45a:	2d bb       	out	0x1d, r18	; 29
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	e2 9a       	sbi	0x1c, 2	; 28
 462:	e1 9a       	sbi	0x1c, 1	; 28
 464:	0f be       	out	0x3f, r0	; 63
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
